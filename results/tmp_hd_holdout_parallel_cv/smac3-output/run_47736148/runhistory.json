{"data": [[[1, "{\"task_id\": \"heart_disease\"}", 0], [0.3127753303964758, 10.192404747009277, {"__enum__": "StatusType.SUCCESS"}, {"duration": 10.095803260803223, "num_run": 2, "train_loss": 0.0, "configuration_origin": "Random initial design."}]], [[2, "{\"task_id\": \"heart_disease\"}", 0], [0.2026431718061674, 6.787046432495117, {"__enum__": "StatusType.SUCCESS"}, {"duration": 6.696046352386475, "num_run": 3, "train_loss": 0.0, "configuration_origin": "Random Search (sorted)"}]], [[3, "{\"task_id\": \"heart_disease\"}", 0], [0.36123348017621143, 5.7955100536346436, {"__enum__": "StatusType.SUCCESS"}, {"duration": 5.708056688308716, "num_run": 4, "train_loss": 0.19162995594713655, "configuration_origin": "Random Search"}]], [[7, "{\"task_id\": \"heart_disease\"}", 0], [1.0, 17.09826898574829, {"__enum__": "StatusType.CRASHED"}, {"traceback": "Traceback (most recent call last):\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/__init__.py\", line 30, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 846, in eval_cv\n    evaluator.fit_predict_and_loss()\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 166, in fit_predict_and_loss\n    i, train_indices=train_split, test_indices=test_split\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 446, in _partial_fit_and_predict\n    self.Y_train[train_indices])\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/abstract_evaluator.py\", line 452, in _fit_and_suppress_warnings\n    model.fit(X, y)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/base.py\", line 93, in fit\n    self.fit_estimator(X, y, **fit_params)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/base.py\", line 110, in fit_estimator\n    self._final_estimator.fit(X, y, **fit_params)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/base.py\", line 402, in fit\n    return self.choice.fit(X, y, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/classification/adaboost.py\", line 37, in fit\n    estimator.fit(X, Y, sample_weight=sample_weight)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py\", line 427, in fit\n    return super().fit(X, y, sample_weight)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py\", line 150, in fit\n    random_state)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py\", line 490, in _boost\n    random_state)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py\", line 554, in _boost_discrete\n    estimator.fit(X, y, sample_weight=sample_weight)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/tree/tree.py\", line 816, in fit\n    X_idx_sorted=X_idx_sorted)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/tree/tree.py\", line 380, in fit\n    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/pynisher/limit_function_call.py\", line 31, in handler\n    raise(TimeoutException)\npynisher.limit_function_call.TimeoutException\n", "error": "TimeoutException()", "configuration_origin": "Random Search (sorted)"}]]], "configs": {"1": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "k_nearest_neighbors", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "extra_trees_preproc_for_classification", "rescaling:__choice__": "normalize", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "False", "classifier:k_nearest_neighbors:n_neighbors": 3, "classifier:k_nearest_neighbors:p": 1, "classifier:k_nearest_neighbors:weights": "distance", "preprocessor:extra_trees_preproc_for_classification:bootstrap": "True", "preprocessor:extra_trees_preproc_for_classification:criterion": "entropy", "preprocessor:extra_trees_preproc_for_classification:max_depth": "None", "preprocessor:extra_trees_preproc_for_classification:max_features": 0.013158313304231894, "preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes": "None", "preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease": 0.0, "preprocessor:extra_trees_preproc_for_classification:min_samples_leaf": 20, "preprocessor:extra_trees_preproc_for_classification:min_samples_split": 18, "preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf": 0.0, "preprocessor:extra_trees_preproc_for_classification:n_estimators": 100}, "2": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "passive_aggressive", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "nystroem_sampler", "rescaling:__choice__": "standardize", "classifier:passive_aggressive:C": 1.3577956669879754, "classifier:passive_aggressive:average": "False", "classifier:passive_aggressive:fit_intercept": "True", "classifier:passive_aggressive:loss": "hinge", "classifier:passive_aggressive:tol": 0.05013633612132145, "preprocessor:nystroem_sampler:kernel": "sigmoid", "preprocessor:nystroem_sampler:n_components": 9098, "preprocessor:nystroem_sampler:coef0": -0.11620471499299767, "preprocessor:nystroem_sampler:gamma": 1.4330865824073555}, "3": {"balancing:strategy": "none", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "passive_aggressive", "imputation:strategy": "median", "preprocessor:__choice__": "kernel_pca", "rescaling:__choice__": "robust_scaler", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "False", "classifier:passive_aggressive:C": 8.28988651869198, "classifier:passive_aggressive:average": "False", "classifier:passive_aggressive:fit_intercept": "True", "classifier:passive_aggressive:loss": "squared_hinge", "classifier:passive_aggressive:tol": 0.04318251960456376, "preprocessor:kernel_pca:kernel": "sigmoid", "preprocessor:kernel_pca:n_components": 1618, "rescaling:robust_scaler:q_max": 0.8343973569190024, "rescaling:robust_scaler:q_min": 0.026012601972888884, "preprocessor:kernel_pca:coef0": -0.01191310401843615}, "7": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "adaboost", "imputation:strategy": "mean", "preprocessor:__choice__": "liblinear_svc_preprocessor", "rescaling:__choice__": "normalize", "classifier:adaboost:algorithm": "SAMME", "classifier:adaboost:learning_rate": 1.4395856977494572, "classifier:adaboost:max_depth": 3, "classifier:adaboost:n_estimators": 473, "preprocessor:liblinear_svc_preprocessor:C": 0.1597278120718543, "preprocessor:liblinear_svc_preprocessor:dual": "False", "preprocessor:liblinear_svc_preprocessor:fit_intercept": "True", "preprocessor:liblinear_svc_preprocessor:intercept_scaling": 1, "preprocessor:liblinear_svc_preprocessor:loss": "squared_hinge", "preprocessor:liblinear_svc_preprocessor:multi_class": "ovr", "preprocessor:liblinear_svc_preprocessor:penalty": "l1", "preprocessor:liblinear_svc_preprocessor:tol": 0.006161896621716631}}}