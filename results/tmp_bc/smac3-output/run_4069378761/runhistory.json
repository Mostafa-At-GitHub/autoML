{"data": [[[1, "{\"task_id\": \"breast_cancer\"}", 0], [0.049645390070921946, 1.19368577003479, {"__enum__": "StatusType.SUCCESS"}, {"duration": 1.088881254196167, "num_run": 2, "train_loss": 0.0, "configuration_origin": "Random initial design."}]], [[2, "{\"task_id\": \"breast_cancer\"}", 0], [0.07092198581560283, 1.1889386177062988, {"__enum__": "StatusType.SUCCESS"}, {"duration": 1.0784049034118652, "num_run": 3, "train_loss": 0.09122807017543855, "configuration_origin": "Random Search (sorted)"}]], [[3, "{\"task_id\": \"breast_cancer\"}", 0], [0.049645390070921946, 2.9860568046569824, {"__enum__": "StatusType.SUCCESS"}, {"duration": 2.8796565532684326, "num_run": 4, "train_loss": 0.03157894736842104, "configuration_origin": "Random Search"}]], [[10, "{\"task_id\": \"breast_cancer\"}", 0], [0.021276595744680882, 1.5845551490783691, {"__enum__": "StatusType.SUCCESS"}, {"duration": 1.4773542881011963, "num_run": 5, "train_loss": 0.01754385964912286, "configuration_origin": "Random Search (sorted)"}]], [[11, "{\"task_id\": \"breast_cancer\"}", 0], [0.099290780141844, 2.194978952407837, {"__enum__": "StatusType.SUCCESS"}, {"duration": 2.0073540210723877, "num_run": 6, "train_loss": 0.08070175438596494, "configuration_origin": "Random Search"}]], [[12, "{\"task_id\": \"breast_cancer\"}", 0], [0.08510638297872342, 0.9025812149047852, {"__enum__": "StatusType.SUCCESS"}, {"duration": 0.8786897659301758, "num_run": 7, "train_loss": 0.04210526315789476, "configuration_origin": "Random Search (sorted)"}]], [[13, "{\"task_id\": \"breast_cancer\"}", 0], [0.36879432624113473, 1.496312141418457, {"__enum__": "StatusType.SUCCESS"}, {"duration": 1.3945744037628174, "num_run": 8, "train_loss": 0.0, "configuration_origin": "Random Search"}]], [[14, "{\"task_id\": \"breast_cancer\"}", 0], [1.0, 1.2948417663574219, {"__enum__": "StatusType.CRASHED"}, {"traceback": "Traceback (most recent call last):\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/feature_preprocessing/fast_ica.py\", line 41, in _fit\n    return self.preprocessor.fit_transform(X)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/decomposition/fastica_.py\", line 534, in fit_transform\n    return self._fit(X, compute_sources=True)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/decomposition/fastica_.py\", line 503, in _fit\n    compute_sources=compute_sources, return_n_iter=True)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/decomposition/fastica_.py\", line 342, in fastica\n    W, n_iter = _ica_par(X1, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/decomposition/fastica_.py\", line 109, in _ica_par\n    - g_wtx[:, np.newaxis] * W)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/decomposition/fastica_.py\", line 56, in _sym_decorrelation\n    s, u = linalg.eigh(np.dot(W, W.T))\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/scipy/linalg/decomp.py\", line 374, in eigh\n    a1 = _asarray_validated(a, check_finite=check_finite)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/scipy/_lib/_util.py\", line 239, in _asarray_validated\n    a = toarray(a)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/numpy/lib/function_base.py\", line 496, in asarray_chkfinite\n    \"array must not contain infs or NaNs\")\nValueError: array must not contain infs or NaNs\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/__init__.py\", line 30, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 688, in eval_holdout\n    evaluator.fit_predict_and_loss(iterative=iterative)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 166, in fit_predict_and_loss\n    i, train_indices=train_split, test_indices=test_split\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/train_evaluator.py\", line 446, in _partial_fit_and_predict\n    self.Y_train[train_indices])\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/evaluation/abstract_evaluator.py\", line 452, in _fit_and_suppress_warnings\n    model.fit(X, y)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/base.py\", line 92, in fit\n    X, fit_params = self.fit_transformer(X, y, **fit_params)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/classification.py\", line 104, in fit_transformer\n    X, y, fit_params=fit_params)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/base.py\", line 102, in fit_transformer\n    Xt, fit_params = self._fit(X, y, **fit_params)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/pipeline.py\", line 317, in _fit\n    **fit_params_steps[name])\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/joblib/memory.py\", line 355, in __call__\n    return self.func(*args, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/sklearn/pipeline.py\", line 718, in _fit_transform_one\n    res = transformer.fit(X, y, **fit_params).transform(X)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/base.py\", line 402, in fit\n    return self.choice.fit(X, y, **kwargs)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/feature_preprocessing/fast_ica.py\", line 49, in fit\n    self._fit(X)\n  File \"/usr/local/anaconda/lib/python3.6/site-packages/autosklearn/pipeline/components/feature_preprocessing/fast_ica.py\", line 44, in _fit\n    raise ValueError(\"Bug in scikit-learn: https://github.com/scikit-learn/scikit-learn/pull/2738\")\nValueError: Bug in scikit-learn: https://github.com/scikit-learn/scikit-learn/pull/2738\n", "error": "ValueError('Bug in scikit-learn: https://github.com/scikit-learn/scikit-learn/pull/2738',)", "configuration_origin": "Random Search (sorted)"}]], [[18, "{\"task_id\": \"breast_cancer\"}", 0], [1.0, 19.087533235549927, {"__enum__": "StatusType.TIMEOUT"}, {"error": "Timeout", "configuration_origin": "Random Search (sorted)"}]]], "configs": {"1": {"balancing:strategy": "none", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "adaboost", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "no_preprocessing", "rescaling:__choice__": "standardize", "classifier:adaboost:algorithm": "SAMME", "classifier:adaboost:learning_rate": 0.7506736009453755, "classifier:adaboost:max_depth": 9, "classifier:adaboost:n_estimators": 268}, "2": {"balancing:strategy": "none", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "gaussian_nb", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "liblinear_svc_preprocessor", "rescaling:__choice__": "minmax", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "True", "preprocessor:liblinear_svc_preprocessor:C": 13165.312073662384, "preprocessor:liblinear_svc_preprocessor:dual": "False", "preprocessor:liblinear_svc_preprocessor:fit_intercept": "True", "preprocessor:liblinear_svc_preprocessor:intercept_scaling": 1, "preprocessor:liblinear_svc_preprocessor:loss": "squared_hinge", "preprocessor:liblinear_svc_preprocessor:multi_class": "ovr", "preprocessor:liblinear_svc_preprocessor:penalty": "l1", "preprocessor:liblinear_svc_preprocessor:tol": 0.048510806596305925, "categorical_encoding:one_hot_encoding:minimum_fraction": 0.004113726492820328}, "3": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "random_forest", "imputation:strategy": "mean", "preprocessor:__choice__": "liblinear_svc_preprocessor", "rescaling:__choice__": "standardize", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "False", "classifier:random_forest:bootstrap": "True", "classifier:random_forest:criterion": "entropy", "classifier:random_forest:max_depth": "None", "classifier:random_forest:max_features": 0.47813542542127696, "classifier:random_forest:max_leaf_nodes": "None", "classifier:random_forest:min_impurity_decrease": 0.0, "classifier:random_forest:min_samples_leaf": 8, "classifier:random_forest:min_samples_split": 10, "classifier:random_forest:min_weight_fraction_leaf": 0.0, "classifier:random_forest:n_estimators": 100, "preprocessor:liblinear_svc_preprocessor:C": 1.4105366467353053, "preprocessor:liblinear_svc_preprocessor:dual": "False", "preprocessor:liblinear_svc_preprocessor:fit_intercept": "True", "preprocessor:liblinear_svc_preprocessor:intercept_scaling": 1, "preprocessor:liblinear_svc_preprocessor:loss": "squared_hinge", "preprocessor:liblinear_svc_preprocessor:multi_class": "ovr", "preprocessor:liblinear_svc_preprocessor:penalty": "l1", "preprocessor:liblinear_svc_preprocessor:tol": 4.7101626189254456e-05}, "10": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "sgd", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "no_preprocessing", "rescaling:__choice__": "standardize", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "False", "classifier:sgd:alpha": 0.00041804541491402667, "classifier:sgd:average": "False", "classifier:sgd:fit_intercept": "True", "classifier:sgd:learning_rate": "invscaling", "classifier:sgd:loss": "hinge", "classifier:sgd:penalty": "elasticnet", "classifier:sgd:tol": 0.008877258151943956, "classifier:sgd:eta0": 0.04670079735020511, "classifier:sgd:l1_ratio": 1.4365465018235135e-08, "classifier:sgd:power_t": 0.6007268808131484}, "11": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "qda", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "select_percentile_classification", "rescaling:__choice__": "minmax", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "True", "classifier:qda:reg_param": 0.17243640823103967, "preprocessor:select_percentile_classification:percentile": 98.88325061601653, "preprocessor:select_percentile_classification:score_func": "chi2", "categorical_encoding:one_hot_encoding:minimum_fraction": 0.04685566791591194}, "12": {"balancing:strategy": "none", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "liblinear_svc", "imputation:strategy": "median", "preprocessor:__choice__": "random_trees_embedding", "rescaling:__choice__": "standardize", "classifier:liblinear_svc:C": 7010.630587548985, "classifier:liblinear_svc:dual": "False", "classifier:liblinear_svc:fit_intercept": "True", "classifier:liblinear_svc:intercept_scaling": 1, "classifier:liblinear_svc:loss": "squared_hinge", "classifier:liblinear_svc:multi_class": "ovr", "classifier:liblinear_svc:penalty": "l2", "classifier:liblinear_svc:tol": 0.0004419577912751124, "preprocessor:random_trees_embedding:bootstrap": "True", "preprocessor:random_trees_embedding:max_depth": 10, "preprocessor:random_trees_embedding:max_leaf_nodes": "None", "preprocessor:random_trees_embedding:min_samples_leaf": 5, "preprocessor:random_trees_embedding:min_samples_split": 20, "preprocessor:random_trees_embedding:min_weight_fraction_leaf": 1.0, "preprocessor:random_trees_embedding:n_estimators": 13}, "13": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "one_hot_encoding", "classifier:__choice__": "libsvm_svc", "imputation:strategy": "most_frequent", "preprocessor:__choice__": "feature_agglomeration", "rescaling:__choice__": "none", "categorical_encoding:one_hot_encoding:use_minimum_fraction": "True", "classifier:libsvm_svc:C": 39.2213091916657, "classifier:libsvm_svc:gamma": 0.02617764834686418, "classifier:libsvm_svc:kernel": "rbf", "classifier:libsvm_svc:max_iter": -1, "classifier:libsvm_svc:shrinking": "False", "classifier:libsvm_svc:tol": 0.002521197232380212, "preprocessor:feature_agglomeration:affinity": "manhattan", "preprocessor:feature_agglomeration:linkage": "average", "preprocessor:feature_agglomeration:n_clusters": 395, "preprocessor:feature_agglomeration:pooling_func": "max", "categorical_encoding:one_hot_encoding:minimum_fraction": 0.0006668515010770337}, "14": {"balancing:strategy": "none", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "liblinear_svc", "imputation:strategy": "mean", "preprocessor:__choice__": "fast_ica", "rescaling:__choice__": "none", "classifier:liblinear_svc:C": 0.28623760957477734, "classifier:liblinear_svc:dual": "False", "classifier:liblinear_svc:fit_intercept": "True", "classifier:liblinear_svc:intercept_scaling": 1, "classifier:liblinear_svc:loss": "squared_hinge", "classifier:liblinear_svc:multi_class": "ovr", "classifier:liblinear_svc:penalty": "l2", "classifier:liblinear_svc:tol": 1.1657240566311553e-05, "preprocessor:fast_ica:algorithm": "parallel", "preprocessor:fast_ica:fun": "exp", "preprocessor:fast_ica:whiten": "False"}, "18": {"balancing:strategy": "weighting", "categorical_encoding:__choice__": "no_encoding", "classifier:__choice__": "gradient_boosting", "imputation:strategy": "median", "preprocessor:__choice__": "polynomial", "rescaling:__choice__": "normalize", "classifier:gradient_boosting:early_stop": "valid", "classifier:gradient_boosting:l2_regularization": 0.7597462899708124, "classifier:gradient_boosting:learning_rate": 0.07890842083490678, "classifier:gradient_boosting:loss": "auto", "classifier:gradient_boosting:max_bins": 256, "classifier:gradient_boosting:max_depth": "None", "classifier:gradient_boosting:max_iter": 324, "classifier:gradient_boosting:max_leaf_nodes": 1628, "classifier:gradient_boosting:min_samples_leaf": 1, "classifier:gradient_boosting:scoring": "loss", "classifier:gradient_boosting:tol": 1e-07, "preprocessor:polynomial:degree": 3, "preprocessor:polynomial:include_bias": "False", "preprocessor:polynomial:interaction_only": "True", "classifier:gradient_boosting:n_iter_no_change": 13, "classifier:gradient_boosting:validation_fraction": 0.310482744295011}}}